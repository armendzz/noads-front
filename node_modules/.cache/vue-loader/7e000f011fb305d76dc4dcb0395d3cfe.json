{"remainingRequest":"/home/armendz/Project/noads-tube/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/armendz/Project/noads-tube/front/src/views/Video.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/armendz/Project/noads-tube/front/src/views/Video.vue","mtime":1609464993941},{"path":"/home/armendz/Project/noads-tube/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/armendz/Project/noads-tube/front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/armendz/Project/noads-tube/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/armendz/Project/noads-tube/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKZXhwb3J0IGRlZmF1bHQgewogICAgICBkYXRhKCl7CiAgICByZXR1cm4gewogICAgICB2aWRlbzogW10sCiAgICAgIHNyYzogW10KICAgIH0KICB9LAogICAgbW91bnRlZCgpewogICAgICAgICAgYXhpb3MucG9zdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL3NpbmdsZScsIHsKICAgICAgICB2aWRpZDogdGhpcy4kcm91dGUucGFyYW1zLnNsdWcKICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICBsZXQgZGF0YSA9IHJlc3BvbnNlLmRhdGEKICAgICAgdGhpcy52aWRlbyA9IGRhdGEKCiAgICAgIAogICAgfSkKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvLyBhIGNvbXB1dGVkIGdldHRlcgogICAgc3JjYzogZnVuY3Rpb24gKCkgewogICAgICAgIGxldCBzcyA9IFtdCiAgICAgICB0aGlzLnZpZGVvLmZvcm1hdHMuZm9yRWFjaChlID0+IHsKICAgICAgICBpZiAodHlwZW9mIGUuYXVkaW9TYW1wbGVSYXRlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAKICAgICAgICAgICBpZihlLm1pbWVUeXBlLmluY2x1ZGVzKCd2aWRlbycpKSBzcy5wdXNoKGUpOwogICAgICAgICAgICAKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICByZXR1cm4gc3MKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Video.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Video.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n      <div>{{ $route.params.slug }}</div>\n    <div class=\"card\">\n        <div class=\"card-header\">{{ video.videoDetails.title }}</div>\n        <div class=\"card-body\">\n        \n            <video controls>\n                <source :src=\"srcc[0].url\"\n                    type=\"video/mp4\" autoplay>\n                              \n            \n            Sorry, your browser doesn't support embedded videos.\n        </video>\n           <video controls>\n                <source :src=\"srcc[1].url\"\n                    type=\"video/mp4\" autoplay>\n                              \n            \n            Sorry, your browser doesn't support embedded videos.\n        </video>\n\n        <hr>\n          {{ video.videoDetails.description }}  \n        </div>\n    </div>\n      \n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nexport default {\n      data(){\n    return {\n      video: [],\n      src: []\n    }\n  },\n    mounted(){\n          axios.post('http://localhost:3000/single', {\n        vidid: this.$route.params.slug\n      }).then(response => {\n          let data = response.data\n      this.video = data\n\n      \n    })\n  },\n  computed: {\n    // a computed getter\n    srcc: function () {\n        let ss = []\n       this.video.formats.forEach(e => {\n        if (typeof e.audioSampleRate !== 'undefined') {\n            \n           if(e.mimeType.includes('video')) ss.push(e);\n            \n          }\n        })\n      return ss\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>"]}]}